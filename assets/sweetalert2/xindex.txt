
<!doctype html>
<html lang="es">

<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.s"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.cs" id="theme-styles">
  <link rel="stylesheet" href="https://sweetalert2.github.io/styles/styles.cs">

</head>

<body>
  <nav class="mobile-hidden">
    <a href="/#examples"><span>Examples</span></a>   
  </nav>

  <div id="show-sidebar">
    <i class="fa fa-bars" aria-hidden="true"></i>
  </div>

  <header>
  </header>

  <script>
    function executeExample() {
      // placeholder for the executeExample until it's actually loaded
    }
  </script>

 

  <!-- Examples -->
  <h3 id="examples">Examples</h3>

  <ul class="examples">

    <li id="message-example">
      <div class="ui">
        <p>A basic message</p>
        <button class="show-example-btn" aria-label="Try me! Example: A basic message" onclick="executeExample('basicMessage')">
          Try me!
        </button>
      </div>
      <pre data-example-id="basicMessage"></pre>
    </li>

    <li id="title-text-example">
      <div class="ui">
        <p>A title with a text under</p>
        <button class="show-example-btn" aria-label="Try me! Example: A title with a text under" onclick="executeExample('titleText')">
          Try me!
        </button>
      </div>
      <pre data-example-id="titleText"></pre>
    </li>

    <li id="serror-example">
      <div class="ui">
        <p>A modal with a title, an error icon, a text, and a footer</p>
        <button class="show-example-btn" aria-label="Try me! Example: A modal with a title, an error icon, a text, and a footer" onclick="executeExample('errorType')">
          Try me!
        </button>
      </div>
      <pre data-example-id="errorType"></pre>
    </li>

    <li id="long-text">
      <div class="ui">
        <p>A modal window with a long content inside:</p>
        <button class="show-example-btn" aria-label="Try me! Example: A modal window with a long content inside" onclick="executeExample('longText')">
          Try me!
        </button>
      </div>
      <pre data-example-id="longText"></pre>
    </li>

    <li id="custom-html">
      <div class="ui">
        <p>Custom HTML description and buttons with ARIA labels</p>
        <button class="show-example-btn" aria-label="Try me! Example: Custom HTML description and buttons" onclick="executeExample('customHtml')">
          Try me!
        </button>
      </div>
      <pre data-example-id="customHtml" data-codepen-css-external="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"></pre>
    </li>

    <li id="three-buttons">
      <div class="ui">
        <p>A dialog with three buttons</p>
        <button class="show-example-btn" aria-label="Try me! Example: A dialog with three buttons" onclick="executeExample('threeButtons')">
          Try me!
        </button>
      </div>
      <pre data-example-id="threeButtons"></pre>
    </li>

    <li id="custom-position">
      <div class="ui">
        <p>A custom positioned dialog</p>
        <button class="show-example-btn" aria-label="Try me! Example: A custom positioned dialog" onclick="executeExample('customPosition')">
          Try me!
        </button>
      </div>
      <pre data-example-id="customPosition"></pre>
    </li>

    <li id="custom-animation">
      <div class="ui">
        <p>Custom animation with <a href="https://animate.style/" target="_blank" rel="noreferrer noopener" tabindex="-1" class="nowrap">Animate.css <i class="fa fa-external-link"></i></a></p>
        <button class="show-example-btn" aria-label="Try me! Example: jQuery HTML with custom animation" onclick="executeExample('customAnimation')">
          Try me!
        </button>
      </div>
      <pre data-example-id="customAnimation" data-codepen-css-external="https://cdn.jsdelivr.net/npm/animate.css@4.0.0/animate.min.css"></pre>
    </li>

    <li id="confirm-dialog">
      <div class="ui">
        <p>A confirm dialog, with a function attached to the "Confirm"-button</p>
        <button class="show-example-btn" aria-label="Try me! Example: A confirm dialog, with a function attached to the 'Confirm'-button" onclick="executeExample('warningConfirm')">
          Try me!
        </button>
      </div>
      <pre data-example-id="warningConfirm"></pre>
    </li>

    <li id="dismiss-handle">
      <div class="ui">
        <p>... and by passing a parameter, you can execute something else for "Cancel"</p>
        <button class="show-example-btn" aria-label="Try me! Example: passing a parameter, you can execute something else for 'Cancel'" onclick="executeExample('handleDismiss')">
          Try me!
        </button>
      </div>
      <pre data-example-id="handleDismiss" data-codepen-css-external="https://sweetalert2.github.io/styles/bootstrap4-buttons.css"></pre>
    </li>

    <li id="custom-image-example">
      <div class="ui">
        <p>A message with a custom image</p>
        <button class="show-example-btn" aria-label="Try me! Example: A message with a custom image" onclick="executeExample('customImage')">
          Try me!
        </button>
      </div>
      <pre data-example-id="customImage"></pre>
    </li>

    <li id="custom-width-padding-background">
      <div class="ui">
        <p>A message with custom width, padding, background and animated Nyan Cat</p>
        <button class="show-example-btn" aria-label="Try me! Example: A message with custom width, padding and background" onclick="executeExample('customWidth')">
          Try me!
        </button>
      </div>
      <pre data-example-id="customWidth"></pre>
    </li>

    <li id="timer-example">
      <div class="ui">
        <p>A message with auto close timer</p>
        <button class="show-example-btn" aria-label="Try me! Example: A message with auto close timer" onclick="executeExample('timer')">
          Try me!
        </button>
      </div>
      <pre data-example-id="timer"></pre>
    </li>

    <li id="rtl">
      <div class="ui">
        <p>Right-to-left support for Arabic, Persian, Hebrew, and other RTL languages</p>
        <button class="show-example-btn" aria-label="Try me! Example: A message in Arabic" onclick="executeExample('rtl')">
          Try me!
        </button>
      </div>
      <pre data-example-id="rtl" data-codepen-html="<body dir='rtl'></body>"></pre>
    </li>

    <li id="ajax-request">
      <div class="ui">
        <p>AJAX request example</p>
        <button class="show-example-btn" aria-label="Try me! Example: AJAX request" onclick="executeExample('ajaxRequest')">
          Try me!
        </button>
      </div>
      <pre data-example-id="ajaxRequest"></pre>
    </li>
  </ul>






  <div class="mobile-hidden">
    <!-- Configuration -->
    <h3 id="configuration">Configuration</h3>

    <p class="center">Here are the keys that you can use if you pass an object into sweetAlert2:</p>

    <table id="api">
      <tr class="titles">
        <th>
          Argument<br>
          (<i>Default value</i>)
        </th>
        <th>
          Description
        </th>
      </tr>
      <tr id="title">
        <td>
          <h4>title</h4><br>
          <i>''</i>
        </td>
        <td>The title of the popup, as HTML.</td>
      </tr>
      <tr id="titleText">
        <td>
          <h4>titleText</h4><br>
          <i>''</i>
        </td>
        <td>The title of the popup, as text. Useful to avoid HTML injection.</td>
      </tr>
      <tr id="html">
        <td>
          <h4>html</h4><br>
          <i>''</i>
        </td>
        <td>
          A HTML description for the popup.<br>
          If <strong>text</strong> and <strong>html</strong> parameters are provided in the same time, <strong>html</strong> will be used.<br>
          [Security] SweetAlert2 does NOT sanitize this parameter. It is the developer's responsibility to escape any user input when using the <strong>html</strong> option, so XSS attacks would be prevented.
        </td>
      </tr>
      <tr id="text">
        <td>
          <h4>text</h4><br>
          <i>''</i>
        </td>
        <td>
          A description for the popup.<br>
          If <strong>text</strong> and <strong>html</strong> parameters are provided in the same time, <strong>html</strong> will be used.
        </td>
      </tr>
      <tr id="icon">
        <td>
          <h4>icon</h4><br>
          <i>undefined</i>
        </td>
        <td>The icon of the popup. SweetAlert2 comes with 5 built-in icon which will show a corresponding icon animation: <strong>warning</strong>, <strong>error</strong>, <strong>success</strong>, <strong>info</strong>, and <strong>question</strong>. It can either be put in the array under the key "icon" or passed as the third parameter of the function.</td>
      </tr>
      <tr id="iconColor">
        <td>
          <h4>iconColor</h4><br>
          <i>undefined</i>
        </td>
        <td>Use this to change the color of the icon.</td>
      </tr>
      <tr id="iconHtml">
        <td>
          <h4>iconHtml</h4><br>
          <i>undefined</i>
        </td>
        <td>The custom HTML content for an icon.</td>
      </tr>
      <tr id="showClass">
        <td>
          <h4>showClass</h4><br>
          <i><pre><code>{
  popup: 'swal2-show',
  backdrop: 'swal2-backdrop-show',
  icon: 'swal2-icon-show'
}</code></pre></i>
        </td>
        <td>CSS classes for animations when showing a popup (fade in)</td>
      </tr>
      <tr id="hideClass">
        <td>
          <h4>hideClass</h4><br>
          <i><pre><code>{
  popup: 'swal2-hide',
  backdrop: 'swal2-backdrop-hide',
  icon: 'swal2-icon-hide'
}</code></pre></i>
        </td>
        <td>CSS classes for animations when hiding a popup (fade out)
        </td>
      </tr>
      <tr id="footer">
        <td>
          <h4>footer</h4><br>
          <i>''</i>
        </td>
        <td>The footer of the popup. Can be either plain text or HTML.</td>
      </tr>
      <tr id="backdrop">
        <td>
          <h4>backdrop</h4><br>
          <i>true</i>
        </td>
        <td>Whether or not SweetAlert2 should show a full screen click-to-dismiss backdrop. Can be either a <strong>boolean</strong> or a <strong>string</strong> which will be assigned to the CSS <strong>background</strong> property.</td>
      </tr>
      <tr id="toast">
        <td>
          <h4>toast</h4><br>
          <i>false</i>
        </td>
        <td>Whether or not an alert should be treated as a toast notification. This option is normally coupled with the <strong>position</strong> parameter and a timer. Toasts are NEVER autofocused.</td>
      </tr>
      <tr id="target">
        <td>
          <h4>target</h4><br>
          <i>'body'</i>
        </td>
        <td>The container element for adding popup into.</td>
      </tr>
      <tr id="input">
        <td>
          <h4>input</h4><br>
          <i>undefined</i>
        </td>
        <td>
          Input field type, can be
          <strong>text</strong>, <strong>email</strong>, <strong>password</strong>,
          <strong>number</strong>, <strong>tel</strong>, <strong>range</strong>,
          <strong>textarea</strong>, <strong>select</strong>, <strong>radio</strong>,
          <strong>checkbox</strong>, <strong>file</strong> and <strong>url</strong>.
        </td>
      </tr>
      <tr id="width">
        <td>
          <h4>width</h4><br>
          <i>'32em'</i>
        </td>
        <td>Popup window width, including paddings (<i>box-sizing: border-box</i>). Can be in any CSS unit (<strong>px</strong>, <strong>em/rem</strong>, <strong>%</strong>).</td>
      </tr>
      <tr id="padding">
        <td>
          <h4>padding</h4><br>
          <i>'0 0 1.25em'</i>
        </td>
        <td>Popup window padding. Can be in any CSS unit (<strong>px</strong>, <strong>em/rem</strong>, <strong>%</strong>).</td>
      </tr>
      <tr id="color">
        <td>
          <h4>color</h4><br>
          <i>undefined</i>
        </td>
        <td>Color for title, content and footer (CSS <strong>color</strong> property). The default color is <strong>'#545454'</strong>.</td>
      </tr>
      <tr id="background">
        <td>
          <h4>background</h4><br>
          <i>undefined</i>
        </td>
        <td>Popup window background (CSS background property). The default background is <strong>'#fff'</strong>.</td>
      </tr>
      <tr id="position">
        <td>
          <h4>position</h4><br>
          <i>'center'</i>
        </td>
        <td>Popup window position, can be <strong>'top'</strong>, <strong>'top-start'</strong>, <strong>'top-end'</strong>, <strong>'center'</strong>, <strong>'center-start'</strong>, <strong>'center-end'</strong>, <strong>'bottom'</strong>, <strong>'bottom-start'</strong>, or <strong>'bottom-end'</strong>.</td>
      </tr>
      <tr id="grow">
        <td>
          <h4>grow</h4><br>
          <i>false</i>
        </td>
        <td>Paired with window position, sets the direction the popup should grow in, can be set to <strong>'row'</strong>, <strong>'column'</strong>, <strong>'fullscreen'</strong>, or <strong>false</strong>.</td>
      </tr>
      <tr id="customClass">
        <td>
          <h4>customClass</h4><br>
          <i>undefined</i>
        </td>
        <td>A custom CSS class for the popup:
 <pre><code>customClass: {
  container: '...',
  popup: '...',
  header: '...',
  title: '...',
  closeButton: '...',
  icon: '...',
  image: '...',
  htmlContainer: '...',
  input: '...',
  inputLabel: '...',
  validationMessage: '...',
  actions: '...',
  confirmButton: '...',
  denyButton: '...',
  cancelButton: '...',
  loader: '...',
  footer: '....',
  timerProgressBar: '....',
}</code></pre>
        </td>
      </tr>
      <tr id="timer">
        <td>
          <h4>timer</h4><br>
          <i>undefined</i>
        </td>
        <td>Auto close timer of the popup. Set in ms (milliseconds). See also <a href="#getTimerLeft">Swal.getTimerLeft()</a>, <a href="#stopTimer">Swal.stopTimer()</a>, <a href="#resumeTimer">Swal.resumeTimer()</a>, <a href="#toggleTimer">Swal.toggleTimer()</a>, <a href="#isTimerRunning">Swal.isTimerRunning()</a> and <a href="#increaseTimer">Swal.increaseTimer()</a>.</td>
      </tr>
      <tr id="timerProgressBar">
        <td>
          <h4>timerProgressBar</h4><br>
          <i>false</i>
        </td>
        <td>If set to true, the timer will have a progress bar at the bottom of a popup. Mostly, this feature is useful with toasts.</td>
      </tr>
      <tr id="heightAuto">
        <td>
          <h4>heightAuto</h4><br>
          <i>true</i>
        </td>
        <td>By default, SweetAlert2 sets html's and body's CSS <strong>height</strong> to <strong>auto !important</strong>. If this behavior isn't compatible with your project's layout, set <strong>heightAuto</strong> to <strong>false</strong>.</td>
      </tr>
      <tr id="allowOutsideClick">
        <td>
          <h4>allowOutsideClick</h4><br>
          <i>true</i>
        </td>
        <td>If set to <strong>false</strong>, the user can't dismiss the popup by clicking outside it.<br>You can also pass a custom function returning a boolean value, e.g. if you want to disable outside clicks for the loading state of a popup.</td>
      </tr>
      <tr id="allowEscapeKey">
        <td>
          <h4>allowEscapeKey</h4><br>
          <i>true</i>
        </td>
        <td>If set to <strong>false</strong>, the user can't dismiss the popup by pressing the <kbd>Esc</kbd> key. You can also pass a custom function returning a boolean value, e.g. if you want to disable the <kbd>Esc</kbd> key for the loading state of a popup.</td>
      </tr>
      <tr id="allowEnterKey">
        <td>
          <h4>allowEnterKey</h4><br>
          <i>true</i>
        </td>
        <td>If set to <strong>false</strong>, the user can't confirm the popup by pressing the <kbd>Enter</kbd> or <kbd>Space</kbd> keys, unless they manually focus the confirm button. You can also pass a custom function returning a boolean value.</td>
      </tr>
      <tr id="stopKeydownPropagation">
        <td>
          <h4>stopKeydownPropagation</h4><br>
          <i>true</i>
        </td>
        <td>If set to <strong>false</strong>, SweetAlert2 will allow <strong>keydown</strong> events propagation to the document.</td>
      </tr>
      <tr id="keydownListenerCapture">
        <td>
          <h4>keydownListenerCapture</h4><br>
          <i>false</i>
        </td>
        <td>Useful for those who are using SweetAlert2 along with Bootstrap modals. By default <strong>keydownListenerCapture</strong> is <strong>false</strong> which means when a user hits <kbd>Esc</kbd>, both SweetAlert2 and Bootstrap modals will be closed. Set <strong>keydownListenerCapture</strong> to <strong>true</strong> to fix that behavior.</td>
      </tr>
      <tr id="showConfirmButton">
        <td>
          <h4>showConfirmButton</h4><br>
          <i>true</i>
        </td>
        <td>If set to <strong>false</strong>, a "Confirm"-button will not be shown.</td>
      </tr>
      <tr id="showDenyButton">
        <td>
          <h4>showDenyButton</h4><br>
          <i>false</i>
        </td>
        <td>If set to <strong>true</strong>, a "Deny"-button will be shown. It can be useful when you want a popup with 3 buttons.</td>
      </tr>
      <tr id="showCancelButton">
        <td>
          <h4>showCancelButton</h4><br>
          <i>false</i>
        </td>
        <td>If set to <strong>true</strong>, a "Cancel"-button will be shown, which the user can click on to dismiss the modal.</td>
      </tr>
      <tr id="confirmButtonText">
        <td>
          <h4>confirmButtonText</h4><br>
          <i>'OK'</i>
        </td>
        <td>Use this to change the text on the "Confirm"-button.</td>
      </tr>
      <tr id="denyButtonText">
        <td>
          <h4>denyButtonText</h4><br>
          <i>'No'</i>
        </td>
        <td>Use this to change the text on the "Deny"-button.</td>
      </tr>
      <tr id="cancelButtonText">
        <td>
          <h4>cancelButtonText</h4><br>
          <i>'Cancel'</i>
        </td>
        <td>Use this to change the text on the "Cancel"-button.</td>
      </tr>
      <tr id="confirmButtonColor">
        <td>
          <h4>confirmButtonColor</h4><br>
          <i>undefined</i>
        </td>
        <td>Use this to change the background color of the "Confirm"-button. The default color is <strong>#3085d6</strong></td>
      </tr>
      <tr id="denyButtonColor">
        <td>
          <h4>denyButtonColor</h4><br>
          <i>undefined</i>
        </td>
        <td>Use this to change the background color of the "Deny"-button. The default color is <strong>#dd6b55</strong></td>
      </tr>
      <tr id="cancelButtonColor">
        <td>
          <h4>cancelButtonColor</h4><br>
          <i>undefined</i>
        </td>
        <td>Use this to change the background color of the "Cancel"-button. The default color is <strong>#aaa</strong></td>
      </tr>
      <tr id="confirmButtonAriaLabel">
        <td>
          <h4>confirmButtonAriaLabel</h4><br>
          <i>''</i>
        </td>
        <td>Use this to change the <strong>aria-label</strong> for the "Confirm"-button.</td>
      </tr>
      <tr id="denyButtonAriaLabel">
        <td>
          <h4>denyButtonAriaLabel</h4><br>
          <i>''</i>
        </td>
        <td>Use this to change the <strong>aria-label</strong> for the "Deny"-button.</td>
      </tr>
      <tr id="cancelButtonAriaLabel">
        <td>
          <h4>cancelButtonAriaLabel</h4><br>
          <i>''</i>
        </td>
        <td>Use this to change the <strong>aria-label</strong> for the "Cancel"-button.</td>
      </tr>
      <tr id="buttonsStyling">
        <td>
          <h4>buttonsStyling</h4><br>
          <i>true</i>
        </td>
        <td>Apply default styling to buttons. If you want to use your own classes (e.g. Bootstrap classes) set this parameter to <strong>false</strong>.</td>
      </tr>
      <tr id="reverseButtons">
        <td>
          <h4>reverseButtons</h4><br>
          <i>false</i>
        </td>
        <td>Set to <strong>true</strong> if you want to invert default buttons positions ("Confirm"-button on the right side).</td>
      </tr>
      <tr id="focusConfirm">
        <td>
          <h4>focusConfirm</h4><br>
          <i>true</i>
        </td>
        <td>Set to <strong>false</strong> if you want to focus the first element in tab order instead of "Confirm"-button by default.</td>
      </tr>
      <tr id="returnFocus">
        <td>
          <h4>returnFocus</h4><br>
          <i>true</i>
        </td>
        <td>Set to <strong>false</strong> if you don't want to return the focus to the element that invoked the modal after the modal is closed.</td>
      </tr>
      <tr id="focusDeny">
        <td>
          <h4>focusDeny</h4><br>
          <i>false</i>
        </td>
        <td>Set to <strong>true</strong> if you want to focus the "Deny"-button by default.</td>
      </tr>
      <tr id="focusCancel">
        <td>
          <h4>focusCancel</h4><br>
          <i>false</i>
        </td>
        <td>Set to <strong>true</strong> if you want to focus the "Cancel"-button by default.</td>
      </tr>
      <tr id="showCloseButton">
        <td>
          <h4>showCloseButton</h4><br>
          <i>false</i>
        </td>
        <td>Set to <strong>true</strong> to show close button in top right corner of the popup.</td>
      </tr>
      <tr id="closeButtonHtml">
        <td>
          <h4>closeButtonHtml</h4><br>
          <i>'&amp;times;'</i>
        </td>
        <td>Use this to change the content of the close button.</td>
      </tr>
      <tr id="closeButtonAriaLabel">
        <td>
          <h4>closeButtonAriaLabel</h4><br>
          <i>'Close this dialog'</i>
        </td>
        <td>Use this to change the <strong>aria-label</strong> for the close button.</td>
      </tr>
      <tr id="loaderHtml">
        <td>
          <h4>loaderHtml</h4><br>
          <i>''</i>
        </td>
        <td>Use this to change the HTML content of the loader.</td>
      </tr>
      <tr id="showLoaderOnConfirm">
        <td>
          <h4>showLoaderOnConfirm</h4><br>
          <i>false</i>
        </td>
        <td>Set to <strong>true</strong> to disable buttons and show the loader instead of the Confirm button. Use it in combination with the <a href="#preConfirm"><strong>preConfirm</strong></a> parameter.</td>
      </tr>
      <tr id="showLoaderOnDeny">
        <td>
          <h4>showLoaderOnDeny</h4><br>
          <i>false</i>
        </td>
        <td>Set to <strong>true</strong> to disable buttons and show the loader instead of the Deny button. Use it in combination with the <a href="#preDeny"><strong>preDeny</strong></a> parameter.</td>
      </tr>
      <tr id="scrollbarPadding">
        <td>
          <h4>scrollbarPadding</h4><br>
          <i>true</i>
        </td>
        <td>Set to <strong>false</strong> to disable body padding adjustment when the page scrollbar gets hidden while the popup is shown</td>
      </tr>
      <tr id="preConfirm">
        <td>
          <h4>preConfirm</h4><br>
          <i>undefined</i>
        </td>
        <td>Function to execute before confirming, may be async (Promise-returning) or sync. <br>Returned (or resolved) value can be:
          <ul>
            <li><strong>false</strong> to prevent a popup from closing</li>
            <li>anything else to pass that value as the <strong>result.value</strong> of <strong>Swal.fire()</strong></li>
            <li><strong>undefined</strong> to keep the default <strong>result.value</strong></li>
          </ul>
          See <a href="#ajax-request">usage example</a>.
        </td>
      </tr>
      <tr id="preDeny">
        <td>
          <h4>preDeny</h4><br>
          <i>undefined</i>
        </td>
        <td>Function to execute before denying, may be async (Promise-returning) or sync. <br>Returned (or resolved) value can be:
          <ul>
            <li><strong>false</strong> to prevent a popup from closing</li>
            <li>anything else to pass that value as the <strong>result.value</strong> of <strong>Swal.fire()</strong></li>
            <li><strong>undefined</strong> to keep the default <strong>result.value</strong></li>
          </ul>
        </td>
      </tr>
      <tr id="returnInputValueOnDeny">
        <td>
          <h4>returnInputValueOnDeny</h4><br>
          <i>false</i>
        </td>
        <td>
          If you want to return the input value as <strong>result.value</strong> when denying the popup, set to <strong>true</strong>.
          Otherwise, the denying will set <strong>result.value</strong> to <strong>false</strong>.
        </td>
      </tr>
      <tr id="imageUrl">
        <td>
          <h4>imageUrl</h4><br>
          <i>undefined</i>
        </td>
        <td>Add a customized icon for the popup. Should contain a string with the path or URL to the image.</td>
      </tr>
      <tr id="imageWidth">
        <td>
          <h4>imageWidth</h4><br>
          <i>undefined</i>
        </td>
        <td>If imageUrl is set, you can specify imageWidth to describes image width. Can be in any CSS unit (<strong>px</strong>, <strong>em/rem</strong>, <strong>%</strong>).</td>
      </tr>
      <tr id="imageHeight">
        <td>
          <h4>imageHeight</h4><br>
          <i>undefined</i>
        </td>
        <td>Custom image height. Can be in any CSS unit (<strong>px</strong>, <strong>em/rem</strong>, <strong>%</strong>).</td>
      </tr>
      <tr id="imageAlt">
        <td>
          <h4>imageAlt</h4><br>
          <i>''</i>
        </td>
        <td>An alternative text for the custom image icon.</td>
      </tr>
      <tr id="inputLabel">
        <td>
          <h4>inputLabel</h4><br>
          <i>''</i>
        </td>
        <td>Input field label.</td>
      </tr>
      <tr id="inputPlaceholder">
        <td>
          <h4>inputPlaceholder</h4><br>
          <i>''</i>
        </td>
        <td>Input field placeholder.</td>
      </tr>
      <tr id="inputValue">
        <td>
          <h4>inputValue</h4><br>
          <i>''</i>
        </td>
        <td>
          Input field initial value. <br><br>
          If the input type is <h4>select</h4>, <h4>inputValue</h4> will represent the selected <h4>&lt;option&gt;</h4> tag. <br><br>
          If the input type is <h4>checkbox</h4>, <h4>inputValue</h4> will represent the <h4>checked</h4> state. <br><br>
          If the input type is <h4>text</h4>, <h4>email</h4>, <h4>number</h4>, <h4>tel</h4> or <h4>textarea</h4> a Promise can be accepted as <h4>inputValue</h4>.
        </td>
      </tr>
      <tr id="inputOptions">
        <td>
          <h4>inputOptions</h4><br>
          <i>{}</i>
        </td>
        <td>If <strong>input</strong> parameter is set to <strong>"select"</strong> or <strong>"radio"</strong>, you can provide options. Can be a Map or a plain object, with keys that represent option values and values that represent option text. You can also provide plain object or Map as values that will represented a group of options, being the label of this <strong>&lt;optgroup&gt;</strong> the key. Finally, you can also provide a Promise that resolves with one of those types. </td>
      </tr>
      <tr id="inputAutoTrim">
        <td>
          <h4>inputAutoTrim</h4><br>
          <i>true</i>
        </td>
        <td>Automatically remove whitespaces from both ends of a result string. Set this parameter to <strong>false</strong> to disable auto-trimming.</td>
      </tr>
      <tr id="inputAttributes">
        <td>
          <h4>inputAttributes</h4><br>
          <i>{}</i>
        </td>
        <td>HTML input attributes (e.g. <strong>min</strong>, <strong>max</strong>, <strong>autocomplete</strong>, <strong>accept</strong>), that are added to the input field. Object keys will represent attributes names, object values will represent attributes values.</td>
      </tr>
      <tr id="inputValidator">
        <td>
          <h4>inputValidator</h4><br>
          <i>undefined</i>
        </td>
        <td>Validator for input field, may be async (Promise-returning) or sync. <br>Returned (or resolved) value can be:
          <ul>
            <li>a <strong>falsy</strong> value (<strong>undefined</strong>, <strong>null</strong>, <strong>false</strong>) for indicating <i>success</i></li>
            <li>a string value (error message) for indicating <i>failure</i></li>
          </ul>
          See <a href="#input-select">usage example</a>.
        </td>
      </tr>
      <tr id="validationMessage">
        <td>
          <h4>validationMessage</h4><br>
          <i>undefined</i>
        </td>
        <td>A custom validation message for default validators (email, url).</td>
      </tr>
      <tr id="progressSteps">
        <td>
          <h4>progressSteps</h4><br>
          <i>[]</i>
        </td>
        <td>Progress steps, useful for queues.</td>
      </tr>
      <tr id="currentProgressStep">
        <td>
          <h4>currentProgressStep</h4><br>
          <i>undefined</i>
        </td>
        <td>Current active progress step.</td>
      </tr>
      <tr id="progressStepsDistance">
        <td>
          <h4>progressStepsDistance</h4><br>
          <i>undefined</i>
        </td>
        <td>Distance between progress steps. Can be in any CSS unit (<strong>px</strong>, <strong>em/rem</strong>, <strong>%</strong>).</td>
      </tr>
      <tr id="willOpen">
        <td>
          <h4>willOpen</h4><br>
          <i>undefined</i>
        </td>
        <td>Popup lifecycle hook. Synchronously runs before the popup is shown on screen. Provides popup DOM element as the argument.</td>
      </tr>
      <tr id="didOpen">
        <td>
          <h4>didOpen</h4><br>
          <i>undefined</i>
        </td>
        <td>Popup lifecycle hook. Asynchronously runs after the popup has been shown on screen. Provides popup DOM element as the argument.</td>
      </tr>
      <tr id="didRender">
        <td>
          <h4>didRender</h4><br>
          <i>undefined</i>
        </td>
        <td>
          Popup lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the popup is repainted on the screen).<br>
          Provides popup DOM element as the argument.<br>
          Typically, this will happen after <strong>Swal.fire()</strong> or <strong>Swal.update()</strong>.<br>
          If you want to perform changes in the popup's DOM, that survive <strong>Swal.update()</strong>, prefer <strong>didRender</strong> over <strong>willOpen</strong>.
        </td>
      </tr>
      <tr id="willClose">
        <td>
          <h4>willClose</h4><br>
          <i>undefined</i>
        </td>
        <td>Popup lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup being fired). Provides popup DOM element as the argument.</td>
      </tr>
      <tr id="didClose">
        <td>
          <h4>didClose</h4><br>
          <i>undefined</i>
        </td>
        <td>Popup lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to another popup being fired).</td>
      </tr>
      <tr id="didDestroy">
        <td>
          <h4>didDestroy</h4><br>
          <i>undefined</i>
        </td>
        <td>
          Popup lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another popup.<br>
          If you have cleanup operations that you need to reliably execute each time a popup is closed, prefer <strong>didDestroy</strong> over <strong>didClose</strong>.
        </td>
      </tr>
    </table>

    <p class="center" id="mixin">
      You can easily reuse configuration by creating your own <strong>Swal</strong> with <strong>Swal.mixin({ ...options })</strong>:
    </p>
  </div>

  <ul class="examples">
    <li>
      <div class="ui">
        <p>Mixin example</p>
        <button class="show-example-btn" aria-label="Try me! Example: Mixin" onclick="executeExample('mixin')">
          Try me!
        </button>
      </div>
      <pre data-example-id="mixin"></pre>
    </li>
  </ul>

  <!-- Declarative templates -->
  <div class="center-container mobile-hidden">
    <h3 id="declarative-templates">Declarative templates and declarative triggering</h3>
    <p class="center">There's also the declarative way to define a popup, via the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" target="_blank" rel="noreferrer noopener" tabindex="-1"><strong>&lt;template&gt;</strong></a> tag. This is handy when you want to define popup on server side (SSR).</p>
  </div>

  <ul class="examples mobile-hidden">
    <li id="declarative-template">
      <div class="ui">
        <p>Declarative template example</p>
        <button class="show-example-btn" aria-label="Try me! Example: Declarative template" onclick="executeExample('declarativeTemplate')">
          Try me!
        </button>
      </div>
      <template id="my-template">
        <swal-title>Save changes to "Untitled 1" before closing?</swal-title>
        <swal-icon type="warning" color="red"></swal-icon>
        <swal-button type="confirm">Save As</swal-button>
        <swal-button type="cancel">Cancel</swal-button>
        <swal-button type="deny">Close without Saving</swal-button>
        <swal-param name="allowEscapeKey" value="false"></swal-param>
        <swal-param name="customClass" value='{ "popup": "my-popup" }'></swal-param>
        <swal-function-param name="didOpen" value="popup => console.log(popup)"></swal-param>
      </template>
      <div style="display: inline-flex; flex-direction: column;">
        <pre style="margin-top: 10px;"><code class="language-html">&lt;template id="my-template"&gt;
  &lt;swal-title&gt;
    Save changes to "Untitled 1" before closing?
  &lt;/swal-title&gt;
  &lt;swal-icon type="warning" color="red"&gt;&lt;/swal-icon&gt;
  &lt;swal-button type="confirm"&gt;
    Save As
  &lt;/swal-button&gt;
  &lt;swal-button type="cancel"&gt;
    Cancel
  &lt;/swal-button&gt;
  &lt;swal-button type="deny"&gt;
    Close without Saving
  &lt;/swal-button&gt;
  &lt;swal-param name="allowEscapeKey" value="false" /&gt;
  &lt;swal-param
    name="customClass"
    value='{ "popup": "my-popup" }' /&gt;
  &lt;swal-function-param
    name="didOpen"
    value="popup =&gt; console.log(popup)" /&gt;
&lt;/template&gt;</code></pre>
        <pre data-example-id="declarativeTemplate" style="margin-top: 10px;"></pre>
      </div>
    </li>
  </ul>

  <div class="center-container mobile-hidden">
    <p class="center">Supported template elements:</p>
    <pre><code class="language-html">&lt;swal-title&gt;...&lt;/swal-title&gt;
&lt;swal-html&gt;...&lt;/swal-html&gt;
&lt;swal-footer&gt;...&lt;/swal-footer&gt;

&lt;swal-param name="..." value="..." /&gt;
&lt;swal-function-param name="..." value="..." /&gt;

&lt;swal-button type="..." color="..." aria-label="..."&gt;...&lt;/swal-button&gt;
&lt;swal-image src="..." width="..." height="..." alt="..." /&gt;
&lt;swal-icon type="..." color="..."&gt;...&lt;/swal-icon&gt;
&lt;swal-input type="..." label="..." placeholder="..." value="..." /&gt;
&lt;swal-input-option value="..."&gt;...&lt;/swal-input-option&gt;</code></pre>
  </div>

  <div class="center-container mobile-hidden">
    <p id="declarative-triggering" class="center">And you can even trigger SweetAlert2 popups declaratively! Use the <strong>bindClickHandler()</strong> method for that:</p>
  </div>

  <ul class="examples mobile-hidden">
    <li>
      <div class="ui">
        <button class="show-example-btn" data-swal-template="#my-template" style="margin: 1em 0;">
          Trigger modal
        </button>
        <button class="show-example-btn" data-swal-toast-template="#my-template">
          Trigger toast
        </button>
      </div>
      <div style="display: inline-flex; flex-direction: column;">
        <pre style="margin-top: 10px;"><code class="language-html">&lt;button data-swal-template="#my-template"&gt;
  Trigger modal
&lt;/button&gt;

&lt;button data-swal-toast-template="#my-template"&gt;
  Trigger toast
&lt;/button&gt;</code></pre>
        <pre data-example-id="declarativeTriggering" data-codepen-html="<template id='my-template'>\n  <swal-title>Hey!</swal-title>\n</template>\n\n<button class='show-example-btn' data-swal-template='#my-template'>\n  Trigger modal\n</button>\n\n<button class='show-example-btn' data-swal-toast-template='#my-template'>\n  Trigger toast\n</button>" style="margin-top: 10px;"></pre>
      </div>
    </li>
  </ul>

  <!-- Handling Buttons -->
  <div class="center-container">
    <h3 id="handling-buttons">Handling Buttons (Confirm, Deny, Cancel)</h3>
    <p class="center">When the user clicks a button, the Promise returned by <strong>Swal.fire()</strong> will be resolved with the <strong>SweetAlertResult</strong> object:</p>
    <table class="dismiss-reasons">
      <tr class="titles">
        <th>Key</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><strong>isConfirmed</strong></td>
        <td>The "Confirm" button was clicked, the <strong>value</strong> will contain the result</td>
      </tr>
      <tr>
        <td><strong>isDenied</strong></td>
        <td>
          The "Deny" button was clicked, the <strong>value</strong> will be <strong>false</strong>.<br>
          Alternatively, if there's an input in a popup, you can use <strong>returnInputValueOnDeny: true</strong> to return the input's value.
        </td>
      </tr>
      <tr>
        <td><strong>isDismissed</strong></td>
        <td>The "Cancel" button was clicked, the <strong>dismiss</strong> will be <strong class="nowrap">Swal.DismissReason.cancel</strong></td>
      </tr>
      <tr>
        <td><strong>value</strong></td>
        <td>The value from the popup, possible values:
          <ul>
            <li><strong>true</strong> for simple confirmed dialogs</li>
            <li><strong>false</strong> for denied popups</li>
            <li>any value for popups with inputs</li>
          </ul>
        </td>
      </tr>
      <tr>
        <td><strong>dismiss</strong></td>
        <td>The dismissal reason, see the <a href="#handling-dismissals">Handling Dismissals</a> section for details</td>
      </tr>
    </table>
  </div>

  <!-- Handling Dismissals -->
  <div class="center-container">
    <h3 id="handling-dismissals">Handling Dismissals</h3>

    <p class="center">When an alert is dismissed by the user, the Promise returned by <strong>Swal.fire()</strong> will be resolved with an object <strong class="nowrap">{ isDismissed: true, dismiss: reason }</strong> documenting the reason it was dismissed:</p>

    <table class="dismiss-reasons">
      <tr class="titles">
        <th>Reason</th>
        <th>Description</th>
        <th>Related configuration</th>
      </tr>
      <tr>
        <td><h4 class="nowrap">Swal.DismissReason.backdrop</h4></td>
        <td>The user clicked the backdrop.</td>
        <td><a href="#allowOutsideClick">allowOutsideClick</a></td>
      </tr>
      <tr>
        <td><h4 class="nowrap">Swal.DismissReason.cancel</h4></td>
        <td>The user clicked the cancel button.</td>
        <td><a href="#showCancelButton">showCancelButton</a></td>
      </tr>
      <tr>
        <td><h4 class="nowrap">Swal.DismissReason.close</h4></td>
        <td>The user clicked the close button.</td>
        <td><a href="#showCloseButton">showCloseButton</a></td>
      </tr>
      <tr>
        <td><h4 class="nowrap">Swal.DismissReason.esc</h4></td>
        <td>The user clicked the <kbd>Esc</kbd> key.</td>
        <td><a href="#allowEscapeKey">allowEscapeKey</a></td>
      </tr>
      <tr>
        <td><h4 class="nowrap">Swal.DismissReason.timer</h4></td>
        <td>The timer ran out, and the alert closed automatically.</td>
        <td><a href="#timer">timer</a></td>
      </tr>
    </table>

    <p class="center">If a popup is dismissed by <strong class="nowrap">Swal.close()</strong>, the Promise will be resolved with an object <strong class="nowrap">{ isDismissed: true }</strong> (<strong>dismiss</strong> will be <strong>undefined</strong>).</p>
  </div>

  <!-- Icons -->
  <h3 id="icons">Icons</h3>
  <table class="popup-icons">
    <tr>
      <td><h4>success</h4></td>
      <td>
        <div class="swal2-icon swal2-success">
          <div class="swal2-success-circular-line-left"></div>
          <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>
          <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>
          <div class="swal2-success-circular-line-right"></div>
        </div>
      </td>
      <td><button class="show-example-btn" data-icon="success" aria-label="Try me! Example: success modal">Try me!</button></td>
    </tr>
    <tr>
      <td><h4>error</h4></td>
      <td>
        <div class="swal2-icon swal2-error">
          <span class="swal2-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span>
        </div>
      </td>
      <td><button class="show-example-btn" data-icon="error" aria-label="Try me! Example: error modal">Try me!</button></td>
    </tr>
    <tr>
      <td><h4>warning</h4></td>
      <td><div class="swal2-icon swal2-warning"><div class="swal2-icon-content">!</div></div></td>
      <td><button class="show-example-btn" data-icon="warning" aria-label="Try me! Example: warning modal">Try me!</button></td>
    </tr>
    <tr>
      <td><h4>info</h4></td>
      <td><div class="swal2-icon swal2-info"><div class="swal2-icon-content">i</div></div></td>
      <td><button class="show-example-btn" data-icon="info" aria-label="Try me! Example: info modal">Try me!</button></td>
    </tr>
    <tr>
      <td><h4>question</h4></td>
      <td><div class="swal2-icon swal2-question"><div class="swal2-icon-content">?</div></div></td>
      <td><button class="show-example-btn" data-icon="question" aria-label="Try me! Example: question modal">Try me!</button></td>
    </tr>
  </table>


  <!-- Input Types -->
  <h3 id="input-types">Input Types</h3>
  <table class="input-types">
    <tr id="input-text">
      <td><h4>text</h4></td>
      <td>
        <pre data-example-id="textInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type text" onclick="executeExample('textInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-email">
      <td><h4>email</h4></td>
      <td>
        <pre data-example-id="emailInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type email" onclick="executeExample('emailInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-url">
      <td><h4>url</h4></td>
      <td>
        <pre data-example-id="urlInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type url" onclick="executeExample('urlInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-password">
      <td><h4>password</h4></td>
      <td>
        <pre data-example-id="passwordInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type password" onclick="executeExample('passwordInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-textarea">
      <td><h4>textarea</h4></td>
      <td>
        <pre data-example-id="textareaInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type textarea" onclick="executeExample('textareaInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-select">
      <td><h4>select</h4></td>
      <td>
        <pre data-example-id="selectInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type select" onclick="executeExample('selectInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-radio">
      <td><h4>radio</h4></td>
      <td>
        <pre data-example-id="radioInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type radio" onclick="executeExample('radioInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-checkbox">
      <td><h4>checkbox</h4></td>
      <td>
        <pre data-example-id="checkboxInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type checkbox" onclick="executeExample('checkboxInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-file">
      <td><h4>file</h4></td>
      <td>
        <pre data-example-id="fileInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type file" onclick="executeExample('fileInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="input-range">
      <td><h4>range</h4></td>
      <td>
        <pre data-example-id="rangeInput"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: input type range" onclick="executeExample('rangeInput')">
          Try me!
        </button>
      </td>
    </tr>

    <tr id="multiple-inputs" class="mobile-hidden">
      <td colspan="3">
        <p>
          Multiple inputs aren't supported, you can achieve them by using <strong>html</strong> and <strong>preConfirm</strong> parameters.<br>
          Inside the <strong>preConfirm()</strong> function you can return (or, if async, resolve with) the custom result:
        </p>
      </td>
    </tr>

    <tr id="multiple-inputs-example" class="mobile-hidden">
      <td></td>
      <td>
        <pre data-example-id="multipleInputs"></pre>
      </td>
      <td>
        <button class="show-example-btn" aria-label="Try me! Example: multiple inputs" onclick="executeExample('multipleInputs')">
          Try me!
        </button>
      </td>
    </tr>
  </table>




  <!-- GitHub corner -->
  <a href="https://github.com/sweetalert2/sweetalert2" class="github-corner mobile-hidden" aria-label=" GitHub" tabindex="-1"><svg width="80" height="80" viewBox="0 0 250 250" style=" position: absolute; top: 0; right: 0; border: 0; fill: #151513; color: #fff;"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm { animation: octocat-wave 560ms ease-in-out; }

  @keyframes octocat-wave {
    0%,
    100% { transform: rotate(0); }

    20%,
    60% { transform: rotate(-25deg); }

    40%,
    80% { transform: rotate(10deg); }
  }

  @media (max-width: 500px) {
    .github-corner:hover .octo-arm { animation: none; }
    .github-corner .octo-arm { animation: octocat-wave 560ms ease-in-out; }
  }
</style>

 <script src="https://sweetalert2.github.io/dist/bundle.js" defer></script>

 
</body>
</html>
